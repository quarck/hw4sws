{sample: true}
# Chapter One - Building Blocks 

## A very brief introduction into electricity 

We would start from a very brief dive into a theory of electricity. This knowledge would be beneficial for better understanding of the further material. 

### Elementary charge 
As everybody knows, conventional matter is made of atoms. Atom itself consists of a smaller building blocks: protons, neutrons and electrons. Protons and neutrons are packed into a tiny nucleus in the centre of the atom and electrons are 'orbiting' around it ('orbiting' is a very simplified description of it). 
Neutrons are electrically neutral while both electrons and protons have an *electric charge*. *Electric charge* is a property of a particle (and matter): particles with electric charge do interact with electric field and particles without electric charge don't. 
Electric charges of electron and proton are equal by the absolute value and opposite by their signs: protons are positively charged and electrons are negatively charged. 
An absolute value of a charge of an electron is called the *elementary charge*, it is a smallest possible charge. Electric charge is quantized, thus any charge is a multiple of elementary charge. (To be absolutely correct, elementary particles called *quarks* can have charges of 1/3 or 2/3 of the elementary charge, but quarks can only exist in combinations with the total charge that is multiple of elementary charge). 

### Electric charge
If we combine `6.2415090744 Ã— 10^{18}`$ of elementary charges together, we would get a total charge equal to a physical unit called  *Coulomb*. You might wander why such arbitrary number? In earlier days of physics *Coulomb* was defined another way - it was a derived unit. But later this definition was changed to be a defined as a multiple of elementary charges as this is the most reliable possible definition: charge of the electron is a physical constant, thus N times physical constant is also a constant. 
Every charged particle has an *electric field* around itself, and other charged particles interact with this field. The net effect of this interaction is that particles with the same charge do repel from each other and particles with the opposite charges do attract. 
On the larger scale, physical objects can be charged positively or negatively by removing or adding some electrons from/to the object. Charged physical objects do produce electric field that is a combined field of all the elementary charges it has. 

### Conducting materials 
In metals electrons 'orbiting' on the outer 'orbits' don't have very strong bound with nucleus, thus when many atoms are combined into a piece of metal, these outer electrons can roam inside the metal relatively freely. Materials that have such properties do conduct electricity. 
Electron is not the only possible conductor of the electricity: water and salt solution would be also very conductive, but instead of electrons there would be negatively and positively charged ions. Ion is an atom that has either lost an electron or has got an extra electron. 

### Electric current 
Let's do a small imaginary experiment: we take two metal spheres, put them into a vacuum, fix them at some distance and charge one sphere negatively and another positively. In the middle between these two spheres we put a single electron. If we ignore gravity, electron would only experience a combined electric field from two spheres that would make it accelerating away from negatively charged sphere towards positively charged sphere. See figure 1.1.
{alt: "Experiment setup", width: "90%"}
![figure 1.1 - Experiment setup](ch1_experiment1.svg)

Next thing we try in the experiment, we take a metal wire and attach one end to negatively charged sphere and another piece to a positively charged one. As we know, metals have some amount of relatively freely moving electrons inside. Similar to electron from the vacuum, free-roaming electrons in the metal would experience force from the electric field and would start moving in the direction from negatively charged sphere towards positively charged, this process would only stop when electric charge of both spheres gets equal. 
What we've just created is an electric circuit with the *electric current*. Electric current is a physical quantity, it is measured in *Coulombs per second* that was given its own name - *Ampere* or *Amp* for short. In circuits and equations it is denoted by the letter *I*. 

### Voltage 
In the previous experiment, by charging the spheres we not only created an electric field but also stored some energy in this system. There is a special unit for measuring 'density' of this energy - *electric potential difference*. It is measured in *joule of energy per coulomb of charge* and this unit has its own name - *Volt*, and the electric potential difference is also known as *Voltage*. 
Electric potential difference can be only measured between two points, it doesn't exist on its own. In our setup we measure it between two charged spheres. 

### Resistance 

We further keep playing with the spheres and wires, and this time we pick a very-very thin metal wire, we if have precise measurement tools we might notice that this time it takes longer for electrons to move from one sphere to another. That's because conductance of a thin wire is worse, or in physical terms it has greater *resistance*, denoted as *R*. Resistance is measured in *Ohms* and one Ohm is such a resistance that would allow a current of 1 Amp at 1 Volt of voltage applied. Resistance, Current and Voltage are all interconnected by the *Ohm's law* 

```$
V = I R
```
Or equally: 
```$
I = \frac{V}{R}
```

## Basic circuits 

Let us now cover just briefly the graphical language used by the electric and electronic circuits to describe the schematics.
 
Physically every circuit consists of some amount of components and wires connecting components together. On diagrams circuits are represented as graphs with some standard symbols indicating particular components and lines showing connections between components. 
Example of a very basic circuit is on the figure 1.2 below. This circuit consists of three components: V1 - voltage (power) source, S1 - switch, L1 - lamp, and obviously there are connections between these components.
{alt: "Basic electric circuit", width: "70%"}
![figure 1.2 - basic circuit](ch1_primitive_circuit.svg)

Operation of this circuit is very simple: when switch is ON - there is an electric current going through the circuit and the lamp is on, when switch is OFF - there is no wire and light is off. 
Conventionally, if direction of the electric current is shown on the circuit, it is shown in the direction from positive terminal to the negative terminal of the voltage source. We known that in fact electrons in metals travel from negative to positive terminals, but this conventional direction is only a convenience. If we change the direction of the flow - we only need to change the sign in front of *I* in the formulas to make it right. 

Let us now look at second circuit example - see figure 1.3.
{alt: "Basic electric circuit with intersections", width: "90%"}
![figure 1.3 - basic circuit with intersections](ch1_circuit_with_intersections.svg)

There we have same building blocks: power source, switches and light bulbs. But now there are some intersections between the lines representing the wires. The rule to read the intersections is simple: if there is a black dot - intersection means connection between intersecting wires, if three is no dot - no connection: one wire is simply passing over another. One exception from this rule is "T-junction", there connecting dot sometimes might be omitted while it would still means connection as no other physical configuration is possible for T-junction.

Quite often you would see the "ground" symbol on the circuit digrams, see figure 1.4 below for as an example. It is the same physical circuit as on figure 1.2, but represented in a different way. Both diagrams 1.2 and 1.4 would have the exact same physical implementation. 
{alt: "Basic electric circuit", width: "60%"}
![figure 1.4 - basic circuit with ground symbols](ch1_primitive_circuit_with_gnd.svg)
You could think of the "ground" as a implicitly assumed wire that reaches everywhere and any "ground" symbol is a connection to that wire. The "ground" usually assumed to be at zero volts, and it is usually connected to the "-" of the power supply in case of DC-powered circuit. Benefit of using this symbol instead of showing explicit connection is reduced amount of lines on the diagram, that obviously improves readability in case of complex circuits. 
 

## Digital Circuits 

Most of the electronic circuits and devices would fall into one of two categories: analogue and digital devices. Both do some form of processing of the input signal to produce some output signal. For example an audio amplifier "processes" input weak audio signal by amplifying its value and producing amplified output signal that approximately matches the shape of the input signal. This would be a classical example of analogue device. Analogue devices process signals that could take any (voltage) value within a certain allowed value range, but inadvertently analogue devices are suffering from all sort of noises that are added into the signal as it is being processed.

Digital circuits on the other hand do process signals that could only take a finite pre-defined set of values, and any physical voltage level is treated as one of the values from the predefined set, usually by picking the nearest match. The most commonly used form is a binary where signal could take only two values, these values usually denoted as logical 0 and logical 1 or LOW and HIGH. 

Important property of digital devices and digital signals is that it is in principle immune to any noise. What is meant by this is that signal can always be decoded, matched against its nearest logical value and encoded fresh for the further transmission. Any previously accumulated noise is gone after such re-encoding. In the real we don't always have enough of such re-encoding as signal is being transmitted and processed, but where it happens system is usually designed to handle such transmission errors, for example in the Ethernet-based networks every now and then some bits of the packet could get transmitted incorrectly, but packet's and data integrity is protected by multiple layers of checksums and any such errors are immediately detected and handled. 

Particular voltage levels for encoding logical LOW and HIGH do vary depending on technology / component base used to build the circuit. The most commonly used CMOS technology is treating any voltage in the range from 0V to 0.8V as logical 0 (or logical LOW), and any voltage from 2V to 3.3V as logical 1 (or logical HIGH). There are other standards and technologies using other voltage levels, for example TTL standard uses range from 2V to 5V for logical HIGH, but CMOS is the most common these days. The actual encoding used doesn't really matter when designing the logical part of the digital device - all the engineer needs to know is whether signal value is logical LOW or logical HIGH.


## Primitive Logic  

For this sub-chapter, imagine yourself as a contractor fitting an X-Ray room in the hospital with some signaling equipment. 
Doctors in particular want to install a light outside the room indicating that X-Ray machine is in use and no one is allowed to enter. That should be operated manually by the switch inside the room. Can we make it? Sure we can, we just need to take a circuit from figure 1.2 and make longer the wires to the lamp L1, see figure 1.5 below: 

{alt: "Basic electric circuit as signaling system", width: "90%"}
![figure 1.5 - X-Ray indicator circuit](ch1_primitive_telegraph.svg)

So whoever is operating the X-Ray machine has to use switch S1 to turn the remote light L1 on or off. What we did is a basic information transmission device that can transmit one bit of information at a time. 

The other day hospital buys a second X-Ray machine and installs it in a adjacent room, so both rooms still share the same main entrance. They contact you again and ask you to modify signaling system in a way that it should allow two independent controls (S1 and S2) and warning light (L1) must be turned on if any of the machines in operation. In other words we want value of *L1* to be equal to *S1 || S2*, where '||' means logical **OR**. We can achieve this functionality by simply placing two switches in parallel, as show on the figure 1.6 below. 
{alt: "Basic 'OR' logic", width: "90%"}
![figure 1.6 - basic OR logic](ch1_primitive_or_logic.svg)

Easy and elegant! If any/both of the switches S1 or S2 is on, then current would flow through the circuit and the warning light would be turned on. 

As you are now an experienced contractor, you got another request from another hospital for a similar system. But this time they want a signaling system for an X-Ray room with slightly different setup. In this hospital they have one machine in a room with one main operator and one safety operator who has only a "kill switch" to shutdown the whole system in case of various unexpected situations. But they want second operator also to be able to turn the warning light off after kill switch invocation. Thus, we would have again indicator switches S1 and S2 and output *L1* should be equal to *S1 && S2*, where '&&' means logical **AND**, i.e. light should only be on if both operator set it into on. 
This functionality also can be achieved easily by using the circuit on the figure 1.7. 
{alt: "Basic 'AND' logic", width: "90%"}
![figure 1.7 - basic AND logic](ch1_primitive_and_logic.svg)

Again, super easy. If any of the switches is not connected - circuit is broken - there would be no current, light L1 is off, and only if both are connected - light would be on. 

The above examples of implementation of logical *AND* and *OR* functions using manually controlled switches are fairly primitive but they demonstrate how boolean logic could be implemented in principle: parallel switches produce logical *OR*, sequential switches produce logical *AND*. 

## Transistors

We've just seen how manually controlled mechanical switches could be arranged to implement some logical functions. But mechanical switch can only be operated manually, so the only input to that logical circuit is a person's intention materialized in a physical action. If we want to build logical functions that take input in form of electric signal and output output in form of electric signal, we need some switching mechanism that can be controlled by electricity. 

In fact there are many-many types of such electrically controlled switches in existence, the most commonly known are: vacuum tubes, mechanical relays, and finally - semiconductor-based devices, transistors in particular. These days digital circuits are built almost entirely from components based on transistors, thus we are not going to details of vacuum tubes or relays, but it is good to know that transistor is not the only option.

Transistors do exist in many different shapes and forms. Main two types of transistors are Bipolar Junction Transistors (BJT) and Field Effect Transistors (FET). Modern day electronics is almost entirely built from specific sub-type of field effect transistor called MOSFET - stands for "Metalâ€“Oxideâ€“Semiconductor Field-Effect Transistor". MOSFETs themselves came in two variants: nMOS and pMOS, graphical symbols for both are shown on the figure 1.8.
{alt: "MOSFET Symbols", width: "70%"}
![figure 1.8 - MOSFET Symbols](ch1_mosfets.svg)

Both nMOS and pMOS have three main electrodes: *Drain* (D), *Source* (S) and *Gate* (G).

The resistance of the path between *Source* and *Drain* (often referred as *channel*) in the MOSFET transistor is directly affected by the voltage applied at the *Gate*. Let's call this voltage *Vg*.
 
For pMOS transistors, gate voltage *Vg* below 0.8V would result in a very low channel resistance, and gate voltage *Vg* above 2.0 would result in a very high channel resistance - over tens of MegaOhms, this is basically the same as no conductivity at all - Source and Drain become disconnected. When gate voltage *Vg* is between 0.8V and 2V, the channel resistance is somewhat between and changing very rapidly - the dependency is non-linear (here and further in this chapter we assume that transistors we are talking about are designed to work with CMOS 3.3V voltage levels).
 
For nMOS transistors the situation is inverse: gate voltage *Vg* below 0.8V would result in a very high channel resistance - over tens of MegaOhms (Source and Drain are disconnected), and gate voltage above 2V would result in a very low channel resistance, and again - anything in between would have neither-fully-conducting-nor-fully-disconnected effect. 
In a digital circuits voltage levels between 0.8V are 2V are not supposed to be used, thus MOSFET transistor can be considered as a simple ON/OFF switch, see figure 1.9. This switch analogy could be helpful in understanding transistor circuits operation in the following chapters. 

{alt: "pMOS and nMOS", width: "80%"}
![figure 1.9 - pMOS and nMOS transistors](ch1_transistor_operation.svg)

As we remember from previous chapter, voltage level between 0V and 0.8V represents logical LOW (or zero) in CMOS 3.3v standard, and voltage level between 2V and 3.3V represents logical HIGH (or one). 

Important property of MOSFET is that *Gate* itself is electrically insulated from the rest of the transistor body. When voltage is applied to *Gate*, it rapidly charges the *Gate*, the exact amount of charge is in direct proportion with the voltage, and that charge sitting on the *Gate* creates en electric field that passes through the transistor body all the way to the base of transistor. That electric field influences amount of free-roaming conducting particles in the channel and that's how transistor is switched OFF or ON (thus the name "field effect"). The base of transistor is usually grounded and not displayed as a separate electrode. 
Since MOSFET's *Gate* is electrically insulated, there can be no current between *Gate* and any other electrode of the same transistor, as result it cost nothing in terms of power consumption to hold transistor in particular desired state - that is what makes MOSFETs more power efficient in digital applications compared to BJT-based circuits. The act of switching (between ON/OFF states), on the other hand, consumes some tiny amount of energy as it takes some energy to electrically charge or discharge the *Gate*.
A bit more details on what's going on inside the transistor and how it is working is given in the Appendix A. 


## Implementing Logical Functions with Transistors

Lets now try combining knowledge about transistors with the knowledge about implementation of *AND* and *OR* logical functions and try implementing  *AND* and *OR* functions using MOSFET transistors. In other words, lets try implementing *logical gates* that perform boolean *AND* and *OR* functions (two different gates).
We already know that *AND* function requires switches to be aligned in sequence and *OR* function requires switches to be aligned in parallel. Thus our first naive attempt would probably be something like on the figure 1.10 below:

{alt: "Naive AND/OR gates implementation - wont work", width: "70%"}
![figure 1.10 - Naive AND and OR gates - wont work!](ch1_naive_and_or_gates.svg )

Each gate above has two inputs: A and B and has output Q, and each has a power source. 

Unfortunately this circuit is not going to work as we expect. To understand what's wrong with this circuit lets try combining two gates together in order to implement function *Q=(A && B) || C* and see what's happens. Circuit on the figure 1.11 attempts to implement such function using our naive gates. 

{alt: "Naive gate implementations - wont work", width: "70%"}
![figure 1.11 - Naive AND + OR gates combined - wont work either!](ch1_naive_gates_circuit.svg)

On that circuit we have the same naive *AND* and *OR* gates aligned in a configuration where output of the first gate is fed into one of the inputs of the second. The "AND" gate is implemented with transistors M1 and M2, and the "OR" gate is implemented on transistors M3 and M4 on the circuit. 
Assume that we've just turned the circuit on, all inputs are logical LOW, output is also logical LOW, so far so good. Then for a short moment we set both inputs A and B into logical HIGH, this would turn transistors M1 and M2 into ON state, as result output of the *AND* gate is effectively connected to the voltage source - it produces logical HIGH. Since output of *AND* gate is connected into transistor M3, and *Gate* of MOSFET is electrically insulated, this would actually have a side effect that piece of wire between transistors M2 and M3 gets a tiny positive electric charge, any real-world wire has some parasitic *capacitance* - ability to store an electric charge. 
If we now turn one of the inputs A or B into logical LOW (or both), output of *AND* gate gets cut from the voltage source, but that tiny electric charge on the wire between M2 and M3 could stay for a significant time, effectively keeping M3 transistor ON. We would get an effect that gate must be producing logical LOW, but in fact it is producing logical HIGH. Even worse - the result is in fact unpredictable and can vary from run to run. 

To fix this problem we need to ensure that parasitic static charge is removed when gate is supposed to be producing logical LOW. We can try adding what's called a *pull down* resistor into each gate, see figure 1.12.  

{alt: "Better gate implementations with pull-down", width: "70%"}
![figure 1.12 - Better AND and OR gates with pull-down resistor](ch1_naive_and_or_gates_fixed.svg)

Resistor is a simple electric device made of material that has high electric resistance (in Ohms), in all aspects it acts just like a regular wire but with some high resistance value. 
By carefully picking the resistor value we could get somewhat approximately acceptable gate operation, but inevitable side effect of pulling signal down is that logical HIGH level produced by the gate would drop a little bit.  
A better approach is to use a pull-up resistor that pulls signal up and use MOSFET transistors to "drop signal to the ground" when gate needs to produce logical LOW. What is meant is that transistor when it is in its ON state would connect the gate output the ground level, this connection via transistor would effectively override weak attempts of the pull-up resistor to produce logical HIGH, the final output of the gate would be logical LOW (when it needs to be). But when transistor is OFF - output would be defined by the pull-up resistor, and it would be a logical HIGH.
Figure 1.13 below shows implementation of *NOR* and *NAND* gates implemented using this principle. *NOR* gate function is *Q = not (A or B)* and *NAND* gate function is *Q = not (A and B)*", where Q is the output and A and B are inputs in both cases.

{alt: "nMOS NAND and NOR", width: "70%"}
![figure 1.13 - nMOS NAND and NOR gates](ch1_nmos_nand_nor.svg)

Let us  examine briefly the NOR gate operation. When both inputs are logical LOW, both nMOS transistors would be OFF, as result output is connected via the resistor to the power source and produces logical HIGH. Now if any of the inputs turns into logical LOW, this would turn the corresponding transistor ON and that transistor would drive output to the signal ground - to the logical LOW. 
Both NAND and NOR gates implemented with pull-up would have almost no visible voltage drop for logical HIGH output. But as a consequence of pulling up, logical LOW would have output voltage slightly greater than just zero volts. For various design reasons it is more acceptable to have a bit raised logical LOW as an opposite to dropped logical HIGH.

Circuits on the figure 1.13 are in fact standard implementations of NAND and NOR gates using nMOS technology - exactly how they are implemented on the nMOS-based microchips. 
It should be obvious how we can implement a nMOS *NOT* function now, see figure 1.14: 

{alt: "nMOS NOT", width: "60%"}
![figure 1.14 - nMOS NOT gate](ch1_nmos_not.svg)

Again, functionality of nMOS NOT gate is very simple: logical LOW on input turns transistor OFF, output is pulled up to the voltage source. Logical HIGH on input turns transistor ON and it drives signal to the ground producing logical LOW. 

Finally, the *AND* and *OR* gates in nMOS technology are implemented as simple combinations of NAND + NOT and NOR + NOT, see figure 1.15. 

{alt: "nMOS NOT", width: "90%"}
![figure 1.15 - nMOS NOT gate](ch1_nmos_and_or.svg)

nMOS technology obviously got its name since it is implemented using nMOS transistors. pMOS-based logical gates are also possible, they are fairly similar nMOS, we would not go into details of pMOS. 

It is worth noting separately, the golden rule of the electronics design is to have ___no dangling inputs, ever___. Any signal should be either directly driven or pulled up or down. 

### CMOS 

Unfortunately, the pull-up resistor in nMOS/pMOS logic creates undesired side effect: increased power consumption. For instance, when nMOS gate is at logical LOW, electric current would be flowing through the pull-up resistor, then one or several transistors and into the ground. This current would be draining power every time nMOS gate is at its logical LOW. 
Second problem with resistors is a physical size: when packing multiple gates into a microchip, it is problematic to make pull-up resistors small on the chip surface - resistor needs some size to resist. 

Fortunately there is a way to get rid of resistors in gate implementations completely. Idea is to combine pMOS and nMOS transistors in the same circuit and make them work in a collaboration: when one transistor is ON another is OFF and vice-versa. Technology implemented this approach is called *CMOS* - *Complementary Metalâ€“Oxideâ€“Semiconductor*. 

Figure 1.12 below illustrates implementation of *NOT* gate using CMOS technology.  
{alt: "CMOS NOT gate", width: "60%"}
![figure 1.12 - CMOS NOT](ch1_cmos_not_gate_2.svg)

Functionality of the CMOS NOT gate is fairly straightforward. If the input is logical LOW, the top pMOS transistor M2 is ON and bottom nMOS transistor M1 is OFF, as result the output is connected to power supply voltage via the transistor M2, the whole circuit becomes an equivalent of figure 1.13 below.

{alt: "CMOS NOT gate operation", width: "50%"}
![figure 1.13 - CMOS NOT with input equals to LOW](ch1_cmos_not_input_low.svg)

Now, if input would be logical HIGH, then situation is inverted and the bottom transistor M1 is ON and the top M2 is OFF, output is connected to bottom line that is at logical LOW level. The whole circuit becomes an equivalent of figure 1.14 below.

{alt: "CMOS NOT gate operation", width: "50%"}
![figure 1.14 - CMOS NOT with input equals to HIGH](ch1_cmos_not_input_high.svg)

What's important is a CMOS NOT gate implementation is that output is always driven explicitly: one transistor is always ON while the other is OFF. 

If we now focus our attention on the NAND gate implementation using CMOS technology, it might look a bit complicated at first, see figure 1.15.

{alt: "CMOS NAND", width: "80%"}
![figure 1.15 - CMOS NAND gate](ch1_cmos_nand.svg)

The bottom two transistors M1 and M2 are similar to such transistors in nMOS variant, but the pull-up resistor is here replaced with two other transistors connected in parallel: M3 and M4, these are pMOS transistors that conduct when input is logical LOW. 
As result, the bottom half of the circuit (consisting of transistors M1 and M2) would drive output to the ground when both inputs A and B are logical HIGH, in any other combination the bottom is inactive. The top part (transistors M3 and M4) would drive output to logical HIGH if any of the inputs is logical LOW, but if both inputs are logical HIGH - top half is inactive. Working together, bottom and top halves would cover all the possible input combinations, thus at any moment there is at least one transistor driving output to some defined value. 

To conclude with CMOS NAND gate, let's bring our transistor as a switch analogy and draw the corresponding switches equivalents for all possible combination of the inputs, see figures 1.16 - 1.19, these should be self-explanatory.  

{alt: "CMOS NAND equivalent for A=B=LOW", width: "60%"}
![figure 1.16 - CMOS NAND gate for A=B=LOW](ch1_nand_low_low.svg )

{alt: "CMOS NAND equivalent for A=LOW, B=HIGH", width: "60%"}
![figure 1.17 - CMOS NAND gate for A=LOW, B=HIGH](ch1_nand_low_high.svg )

{alt: "CMOS NAND equivalent for A=HIGH, B=LOW", width: "60%"}
![figure 1.18 - CMOS NAND gate for A=HIGH, B=LOW](ch1_nand_high_low.svg )

{alt: "CMOS NAND equivalent for A=B=HIGH", width: "60%"}
![figure 1.19 - CMOS NAND gate for A=B=HIGH](ch1_nand_high_high.svg )

CMOS NOR gate is fairly similar in its structure to CMOS NAND gate, but instead of parallel resistors at the top they are sequential, and instead of sequential resistors at the bottom they are parallel, see figure 1.20. I would leave it as an exercise for the reader to verify that circuit is indeed implements NOR function. 

{alt: "CMOS NOR", width: "80%"}
![figure 1.20 - CMOS NOR gate](ch1_cmos_nor.svg)

Finally, OR and AND functions are usually implemented, similar to nMOS, as a sequence of NOR + NOT / NAND + NOT gates. For various chip-manufacturing reasons it is the most convenient way. 

So far we've learned that CMOS technology has solved a problem of static power drain that is inherent to pMOS/nMOS technologies. But switching between logical states isn't entirely free for CMOS gates, there are two separate processes contributing into the total power consumption of the gate. 

First process is related to already mentioned parasitic capacitance of the tiny wires connecting outputs of one transistors to inputs of the other. When the level on a particular wire is driven into logical HIGH, it receives a tiny bit of electric charge, and that charge stores tiny bit of energy. When the wire level is switched back into logical LOW, that parasitic electric charge is discharged into the ground. Individual wire's power dissipation is negligible, but for a large chips working at high frequencies, the total becomes fairly significant. 

Second process is very much specific to CMOS technology. It takes time for a MOSFET transistor to switch between ON and OFF states, this time is really tiny but it is not zero. When particular input of CMOS gate flips its value there would be two transistors inside the gate, one switching from ON into OFF and the matching transistor switching from OFF into ON. There would be a moment when one transistor is *already* conducting a tiny bit and the matching transistor is *still* conducting a tiny bit. This conductivity of pair of matching transistors creates an open electric circuit and for a fraction of the second there would be a noticeable current flowing through the couple of transistors. This would last only for a number of nanoseconds (or even less), so the total energy dissipated per transistor is tiny to cause any damage to the transistor, but again when multiplied by the number of transistors in a chip - this type of power consumption can be fairly significant.  

You might wonder, what would happen to a CMOS gate if we apply some voltage from the 'forbidden' range between 0.8V and 2.0V on one of its inputs? Nothing pleasant in fact. At this input voltage, both transistors in the matching nMOS/pMOS pair would have some conductivity, but this time the high current though the transistors would last as long as we keep the input in the forbidden voltage range. Result could be fairly catastrophic as such high current could very easily destroy the transistors and the whole chip. For this reason it is again, very important to ensure all the inputs in the circuit are explicitly driven to some defined value. 

## Standard Logical Gates 

We've just implemented a number of various logic gates using nMOS and CMOS technology. In digital circuits, these logic gates are considered as a standard building blocks and used in the circuits without specifying the actual implementation.
Table below shows the list of all common logical gates along with the definition of its function and gate symbol. 

{alt: "Logical Gates Table", width: "95%"}
![Logical Gates](ch1_gates_table.svg )

There are two types of symbols in circulation for logical gates: ones standardized by ANSI (American National Standards Institute) and ones standardized by IEC (European's International Electrotechnical Commission). In this book we would be using ANSI symbols, but it is good to know others do exist. 

You might notice there is no mention of power supply to the gate on its symbol: all gates are assumed to be powered by the common power source, so power connections are never shown when drawing diagram consisting of logical gates. 

All two-input gates shown in the table above also do exist in a configuration with more than just two inputs. 

You might also ask what is the use for *Buffer* gate as it just outputs the same value as it has on the input. In short - it can be useful as a signal repeater. Each gate's output can only drive a number of inputs to other gates and if more is required - it is possible to 'enforce' signal by using one or several buffers. Another use is to get rid of any possible noise after signal is transmitted over the long line, and 'long' sometimes could mean from one side of the big microchip to another side of the same microchip. 

It should be noted that there are some special gate types that are not listed in the table above (like three-state buffers), but these are not very commonly used. The gates listed above are sufficient for building any logical circuit / device, so we are not going to focus on anything outside the gates listed here.  

Speaking of implementation of the gates, we already know how AND, NAND, NOR, AND and OR gates are implemented by nMOS / CMOS technologies. 
Buffer gate is usually just two sequentially connected NOT gates. XOR and XNOR gates are often implemented as a network of NAND or NOR gates, see figures 1.21 and 1.22 below. 

{alt: "XOR and XNOR from NAND", width: "80%"}
![figure 1.21 - XOR and XNOR gates from NAND gates](ch1_xor_xnor_with_nand.svg)

{alt: "XOR and XNOR from NOR", width: "80%"}
![figure 1.22 - XOR and XNOR gate from NOR gates](ch1_xor_xnor_with_nor.svg)

Structure of all the XOR and XNOR implementations is fairly similar, so let us just examine briefly XOR implementation from NAND gates, let give each NAND gate names from U1 to U4 as on the figure 1.23, and let's analyze what would be the output. 

{alt: "XOR from NAND", width: "80%"}
![figure 1.23 - XOR from NAND gates](ch1_xor_named_parts.svg)

Below we would be using math notation (where `AB`$ as well as `A \cdot B`$ means *A && B*, and similarly `A+B`$ means *A || B*, and bar above the symbol means **not**; in this notation **and** is assumed to have higher priority over **or**)

Gate U1 output would be obviously:
```$ 
U1 = \overline{AB} = \overline{A} + \overline{B}
```

Gate U2 would take signal A and output of gate U1, so result is:
```$
U2 = \overline{A \cdot (\overline{A} + \overline{B})}
```
This can be simplified: 
```$
U2 = \overline{A} + \overline{\overline{A} + \overline{B}} = \overline{A} + AB = \overline{A} + B
```

Gate U3 is symmetrical to U2, thus obviously: 
```$
U3 = A + \overline{B}
```

And finally, output of the whole gate network: 
```$
U4 = \overline{ (\overline{A} + B) \cdot (A + \overline{B}) }
```
```$
U4 = \overline{\overline{A} + B} + \overline{A + \overline{B}}
```
```$
U4 = A \overline{B} + \overline{A} B
```

So for this whole network: 

```$
Q = A \overline{B} + \overline{A} B
```

This is exactly the logical expression that represents XOR function. 


## Kingdoms of NAND and NOR 

By looking at the XOR / XNOR gates implementation via NAND / NOR gates reader might have already started suspecting about important property of NAND and NOR gates: it is possible to implement all the other standard gates from purely NAND only gates as well as from purely NOR only gates. That's indeed possible, we've already seen implementations for XOR / XNOR gates, thus figures 1.24 demonstrate the rest of the standard gates implemented in NAND / NOR components. 

{alt: "NAND / NOR based logic", width: "95%"}
![figure 1.24 - NAND and NOR logic](ch1_nand_nor_constructs.svg)

Why is this important? There is a commonly used method of cost reduction for custom microchip design that utilizes this property of NAND / NOR gates. Idea is to standardize and re-use in large numbers the 'base plate' - a two dimensional array of either NAND or NOR gates on the chip, so  particular custom chip design only needs to implement the interconnects between these gates. 


## Gate Propagation Delays 

Modern transistors are really fast, but still switching between ON and OFF states cannot be instantaneous. And so, the logic gates could never react immediately to change of the input signal. 
Each gate has a measurable *propagation delay*, and transistor switching speed is the largest contributing factor into that delay. 
Let say we have a buffer gate with input *A* and output *Q*, and some signal changing between logical HIGH and LOW on the input, then output would be delayed as shown on the figure 1.25. On this figure each signal is shown in its own relative voltage coordinates, thus both lines are only switching between LOW and HIGH, while time coordinate is aligned for both signals. 

{alt: "Buffer propagation delay", width: "80%"}
![figure 1.25 - Gate propagation delay - Buffer](ch1_gate_times.svg)

Propagation delay is measured between middle-points of wave-slope where signal is changing between LOW and HIGH, on the figure above t1 and t2 are two of such delays. 
Change of signal from LOW to HIGH is called *rising edge* in digital circuits design, and similarly change form HIGH to LOW is called *falling edge*. What's important is that propagation delay can be different between rising and falling edges, since MOSFET transistors aren't fully symmetrical in many ways. The worst case scenario propagation delay is usually used as the propagation delay of the whole gate. 

Propagation delay should be taken into account when digital circuit is designed, as it limits maximum performance of the circuit. 


