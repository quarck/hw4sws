{sample: true}
# Chapter Two - Combination Circuits 

## Pure Functions of Hardware World 

First class of digital devices and circuits we are going to examine is called *combination circuits*. 

Combination circuit is a circuit number of input signals, number of output signals, and the main characteristic of the combination circuit is that its outputs are only depend on the current values of input signals and nothing else. 

From this perspective combination circuits are similar to pure functions of functional programming world. 

## Ways To Define Combination Circuit

Combination Circuit could be considered as a black-box with N inputs and M outputs. Let's denote by the letter *F* the function of the black box that defines relationship between inputs and outputs. 

Such function *F* can be fully defined by the table that lists all possible combinations of the input signals and provides expected output signals for a given set of inputs. An example of such table is given on the table 2.1 below. Here we have three input signals: *A*, *B*, and *C*, and two output signals - *X* and *Y*, in the table we use 0 for logical LOW and 1 for logical HIGH signal values. 

{width: "80%"}![Table 2.1 - example function defined by the table](ch2_tab_log_func.svg)

Another possible way of defining function *F* is by providing a logical expression(s) for the output value(s). 

In fact, any function provided in table form can be re-written as a logical expression as well, lets see how this can be done. 
Let's take our function defined by the table 2.1 and focus on output *X* first. If we were to write the C-style code that produces value for *X*, we would have written something like: 

```C
X = ( (A==0 && B==0 && C==1) || 
      (A==0 && B==1 && C==0) || 
      (A==1 && B==0 && C==0) || 
      (A==1 && B==1 && C==1) )
    ? 1 : 0;
```

In a condition we test to see if combination of inputs matches one of the rows producing *X=1* (rows 2, 3, 5, 8), and if so - we output 1, otherwise we output 0. 

But since *A*, *B*, *C* and output are boolean / logical values, we can simply write: 

```C
X = (!A && !B && C) || (!A && B && !C) ||
    (A && !B && !C) || (A && B && C);
``` 

We've got a boolean logic expression for output *X*, the same can be written in math notation: 

```$
X = \bar{A} \bar{B} C + \bar{A} B \bar{C} + A \bar{B} \bar{C} + A B C
``` 

Alternatively we can write the condition that tests for rows producing '0' and make our expression output '1' if we don't match any of these rows: 

```C
X = !(A==0 && B==0 && C==0) && !(A==0 && B==1 && C==1) && 
    !(A==1 && B==0 && C==1) && !(A==1 && B==1 && C==0)
``` 

The latter can simplified to: 

```C
X = (A || B || C) && (A || !B || !C) && 
    (!A || B || !C) && (!A || !B || C)
``` 

Or, equally, using math notation: 

```$
X = (A + B + C) (A + \bar{B} + \bar{C}) (\bar{A} + B + \bar{C})  (\bar{A} + \bar{B} + C)
```

Both final expressions are equivalent and define the same output *X*.

The first type of expression `X = \bar{A} \bar{B} C + \bar{A} B \bar{C} + A \bar{B} \bar{C} + A B C`$  is called *disjunctive normal form* of the function and each of individual -or-ed components (`\bar{A} \bar{B} C`$, etc) is called a *minterm*.

The second expression `X = (A + B + C) (A + \bar{B} + \bar{C}) (\bar{A} + B + \bar{C})  (\bar{A} + \bar{B} + C)`$) is called *conjunctive normal form* of the function, and each individual -and-ed component (`(A + B + C)`$, etc) is called a *maxterm*. 

If we look closely at these expressions again, it is not hard to see how we can directly derive those from the table form of the *X*. 

For *disjunctive normal form*, we select all the rows producing value '1', each such row forms individual *minterm*. If there is '0' for against particular input value, it goes with the *not* into minterm, otherwise it goes as it is. Thus, we create as many minterms as there are '1's on the output and finally *OR* all the minterms  to produce the resulting expression. 

For *conjunctive normal form* we select all the rows producing value '0', each row forms individual *maxterm*. If there is '1' against particular input value, it goes with the *not* into a maxterm, otherwise it goes as it is. Again, we create as many maxterms as there are '0's in the output, and finally *AND* all the maxterms to produce the resulting expression. 

Depending on the particular function it might be easier to use either *disjunctive* or *conjunctive* normal forms: for example if function produces only a few '0's and all the outputs in the table are '1's, the *conjunctive* form would result in much shorter expression. 

Lets practice and use *disjunctive normal form* to produce the expression for *Y* directly. We select the rows that make output value of Y to be equal 1, and build a minterm out of each of these, see figure 2.1. 

{width: "80%"}![Figure 2.1 - Example DNF construct](ch2_dnf_example.svg)
 
Now we combining all the minterms into the final expression: 

```$
Y = \bar{A} B C +  A \bar{B} C + A B \bar{C} + A B C
```

As reader might have started suspecting, none of expressions we've got so far is optimal. Let's take the first one and try optimizing by applying the rules of boolean algebra to convert the expression into something smaller: 

The original expression: 

```$
X = \bar{A} \bar{B} C + \bar{A} B \bar{C} + A \bar{B} \bar{C} + A B C
```

grouping similar terms together: 

```$
X = \bar{A} \bar{B} C + \bar{A} B \bar{C} + A \bar{B} \bar{C} +  A B C
```

```$
X = \bar{A} (\bar{B} C + B \bar{C}) + A ( \bar{B} \bar{C} + B C )
```

It is not hard to see that `\bar{B} C + B \bar{C}`$ is in fact *XOR*, in math symbols written as `B \oplus C`$. 
And similarly `\bar{B} \bar{C} + B C`$ is in fact *XNOR*, in math notation written as `\overline{B \oplus C}`$.

Thus, replacing these sub-expressions into XOR/XNOR symbols: 

```$
X = \bar{A} (B \oplus C) + A (\overline{B \oplus C})
```

Very similarly, the latter is on its own a *XOR* between `A`$ and `B \oplus C`$, thus we can finally write: 

```$
X = A \oplus B \oplus C
```


Lets do the same for *Y*: 

The original expression: 

```$
Y =  \bar{A} B C +  A \bar{B} C + A B \bar{C} + A B C
```

Grouping: 

```$
Y =  (\bar{A} B + A \bar{B}) C + A B ( \bar{C} + C )
```

The `\bar{C} + C`$ term is always true, so can be eliminated, and `\bar{A} B + A \bar{B}`$ is again a *XOR* function, thus: 

```$
Y =  (A \oplus B) C + A B
```

This way, we have fully defined by the expression the output of the function defined by the table 2.1. 


## Implementation Using Logic Gates 

Let us once again focus our attention on the combination circuit defined by the table 2.1, for which we've produced simplified logical expressions for outputs *X* and *Y*, and see how we can implement in a physical circuit using logic gates. 

Once again, expressions we've got for *X* and *Y* are: 

```$
\begin{align*}
X &= A \oplus B \oplus C  \\
Y &= (A \oplus B) C + A B
\end{align*}
```

This very first circuit - let us build it slowly step by step, just to make it easier to read. We would be operating with elementary base consisting of logic gates with only two inputs.

First step is a circuit for sub-expression `A \oplus B`$, it is just a simple single *XOR* gate, figure 2.2: 

{width: "70%"}![Figure 2.2 - A xor B](ch2_a_xor_b.svg)

Then we add a second *XOR* gate to produce `X = A \oplus B \oplus C`$, we just chain another *XOR* gate, figure 2.3: 

{width: "70%"}![Figure 2.3 - A xor B xor C](ch2_a_xor_b_xor_c.svg)

And that's the gate network for output *X* already. Now we implement network for *Y*. The `A \oplus B`$ term is also required for *Y* so we can re-use it and go directly into implementing `(A \oplus B) C`$, figure 2.4: 

{width: "70%"}![Figure 2.4 - A xor B xor C | (A xor B) and C](ch2_a_xor_b_xor_c___a_xor_b_and_c.svg)

Now we add a parallel `A B`$ term, figure 2.5:  

{width: "70%"}![Figure 2.5 - A xor B xor C | (A xor B) and C] | A and B](ch2_a_xor_b_xor_c___a_xor_b_and_c__a_and_b.svg)

Finally we combine `(A \oplus B) C`$ with `A B`$ to produce the full circuit for output *Y*, figure 2.6: 

{width: "70%"}![Figure 2.6 - Logic gate implementation of table 2.1](ch2_anon_adder.svg)

And that is the gate network that would produce the exact output as was defined by the table 2.1. 
The resulting implementation takes only 5 gates, that is way less than if we were to implement the original *DNF* or *CNF* based form. 


## One Bit Full Adder 

The combination circuit defined by the table 2.1 is in fact an important base component, it has its own name - **full adder**. To get its canonical form we only need to rename input *C* into *C~in~* - for 'carry in', *X* into *S* - for 'Sum', and *Y* into *C~out~ * - for 'carry out'. See table 2.2 and figure 2.7.

{width: "80%"}![Table 2.2 - example function defined by the table](ch2_tab_adder_func.svg)

{width: "70%"}![Figure 2.7 - Full Adder](ch2_adder.svg)

Full adder computes arithmetic sum of three individual bits - *A*, *B*, *C~in~* and produces two-bit output where most significant bit is *C~out~ * and least significant bit is *S*. The *C~in~* input is necessary for chaining multiple full adders into wider (N-bit) adders - we would see how very soon. 

In the circuit diagrams, full adder is usually displayed as a rectangle with inputs on the left and outputs on the right, each input / output has a corresponding label inside the rectangle, see figure 2.8.

{width: "65%"}![Figure 2.8 - Full Adder](ch2_adder_symbol.svg)

Component similar to a full adder, but  without *C~in~* input is called *half adder*: it has inputs *A* and *B*, and produces the same *S* and *C~out~*. By combining two half adders with *OR* gate, we could build a full adder, as shown on the figure 2.9. 

{width: "70%"}![Figure 2.9 - two half adders](ch2_half_adders.svg)

As an optional exercise, try building the table that would define functionality of the half-adder, then produce the logical expressions for the outputs and the circuit implementation, then finally compare the resulting circuit for the half adder vs full adder implementation. (See the appendix B for the half-adder circuit implementation).


## Karnaugh Maps

In the previous section we did a laborious manual work in order to simplify functions presented in their disjunctive normal forms into something smaller. 
Luckily there is simpler method exists. Method was introduced by Maurice Karnaugh and named after him - *Karnaugh Map*. The method utilizes our natural ability to recognize graphical patterns in the tables, avoiding working with the boolean algebra expressions. It works well for up to functions of up to four arguments, and with some tricks can be used for functions of five arguments.

Fluency with Karnaugh maps is not necessary in order to proceed further with this book, but some familiarity would be useful, so we would take some break from circuits and would spend some time with Karnaugh maps in this chapter now.
The formal description of this method can be a bit boring, it is much easier to demonstrate the method by the example. Practically it only makes sense to use Karnaugh maps for functions of three and more arguments, for two-argument function it is easy to optimize it away manually. 
So let's start with the example function defined by the table 2.3 below, arguments are *A*, *B* and *C* and the output is *Y*.

{width: "80%"}![Table 2.3](ch2_tab_three_args_karnaugh_maps.svg)

As a first step we arrange function outputs into a two-dimensional form as shown on the figure 2.10 below. 

{width: "70%"}![Figure 2.10 - Three variable Karnaugh map](ch2_kmap_of_three_var_expl.svg)

This is not a standard representation of a Karnaugh map, but it gives better visibility of the two-dimensional layout. Rows of the table are indexed by the argument *A* of the function, and columns are indexed by a 'composite index' consisting of pair of arguments *B* and *C*. 
The order of indexes is important: it is arranged in such a way that any adjacent columns (or rows) are only different by a single argument value: 
* the first and second columns are only different by the value of *C*
* the second and third columns are only different by the value of *B* 
* the third and fourth columns are only different by the value of *C* 
* the fourth and first columns should be also considered as adjacent and are only different by the value of *B*

Usually Karnaugh map is represented in a bit more compact form as shown on the figure 2.11. 

{width: "65%"}![Figure 2.11 - Karnaugh map example](ch2_example_three_variable_kmap.svg)

The main idea of the Karnaugh map, is that after we fill the table as shown on figure 2.11, we visually search for 'groups' of values 1-es in the table. Let's first see what groups our example function would produce and then we would talk about them in detail. For our example function we would have two groups, shown by dashed ellipses on the figure 2.12. 

{width: "65%"}![Figure 2.12 - Karnaugh map example](ch2_example_three_variable_kmap_with_groups.svg)

The bottom group is obvious - two 1s sitting next to each other, the top one might be a bit more confusing: Karnaugh map should be considered as looping around the edges like in a pacman game, so top leftmost cell and top rightmost cells are in fact neighbors and should be grouped together. 
In general, each group we create should have both width and height to be only of value of 1, 2, or 4. If we find a 3x2 rectangle of 1s, it should be split into two overlapping 2x2 groups (we would see example below). 

It is important to include every 1 into at least one group. Stand-alone 1s should be included into individual 1x1 groups. Our goal is to make groups as big as possible, and make as few of them as possible. In result, each group would produce a single minterm in the resulting boolean expression, and the larger group is - smaller would be the term. 

Lets dig a bit into details of mechanics under the hood of Karnaugh maps. The top group on figure 2.12 consists of two cells, first cell maps to *A,B,C* of values *0,0,0*, and the second corresponds to *A,B,C=0,1,0*.

If we write a disjunctive normal form based on just these two cells, we would get an expression:

```$
\bar{A} \bar{B} \bar{C} + \bar{A} B \bar{C}
```
The `\bar{A} \bar{C}`$ component is the same for both minterms, so it can be simplified as follows: 
```$
\bar{A} \bar{B} \bar{C} + \bar{A} B \bar{C} = \bar{A} ( \bar{B} + B ) \bar{C} = \bar{A} \bar{C}
```

And that's the main principle: any two adjacent 1s in the Karnaugh map would produce minterms that are only different by a single argument and that argument can be eliminated. Furthermore, we don't have to do boolean expressions by hand: next time when we see pair of adjacent 1s, we simply eliminate the only argument that is changing between the cells. So for the bottom group, left cell maps to *A,B,C* values of *1,**0**,1*  the right maps to *1,**1**,1*, - they are only different by value B, and that B is eliminated, resulting minterm based on remaining non-changing arguments: `A B`$. 
And then we just combine all the minterms we got into one final expression for the output variable: 

```$
Y = \bar{A} \bar{C} + A C
```

What if we got bigger group? Imagine we have another function *Z*, that produces Karnaugh map as shown on the figure 2.13. 

{width: "65%"}![Figure 2.13 - Karnaugh map example](ch2_example_vert_long_horiz_groups.svg)

Here we have a 'tiny' vertical group of two elements and the large horizontal one. We know how to handle groups of two elements, so the vertical group would produce term `\bar{B} C` (argument *A* is the only changing in this group and it is eliminated). 
For the 'large' horizontal group we would once again look into the under-the-hood mechanics, so if we write the disjunctive normal form expression based on the bottom row of 1s we would get: 

```$
A \bar{B} \bar{C} + A \bar{B} \C + A B C + A B \bar{C}
```

Only *A* is common in every term, but the rest can be optimized away: 

```$
A \bar{B} \bar{C} + A \bar{B} \C + A B C + A B \bar{C}\\
= A (\bar{B} \bar{C} + \bar{B} \C + B C + B \bar{C})
```
```$
= A (\bar{B} (\bar{C} + \C) + B (C + \bar{C}))
```
```$
= A (\bar{B} + B)
```
```$
= A
```

Intuitively we already knew that: in the larger groups we only keep arguments that don't change, everything else is eliminated. (*But it is important to remember that groups must be of a correct size - you can't eliminate elements in a 2x3 (or similar) group as there would be no matching pairs for every term*). 

So for this second function we got two minterms, the resulting expression is as follows: 

```$
Z = A + \bar{B} C
```

As we've talked about it already, lets see an example of inconvenient-sized 'groups'. Let's take a look at another function *R*, that produces Karnaugh map as shown on the figure 2.14. 

{width: "65%"}![Figure 2.14 - Karnaugh map example](ch2_example_all_bug_single_zero.svg)

Here we have to create three separate groups to cover all 1s by the correctly-sized groups, as shown on the figure. Instead of 3x2 group we create two 2x2 groups. We could have created a combination of 2x2 and 1x2 groups instead, but remember - our goal is to make groups as large as possible, thus eliminating more arguments from minterms. Same can be said about the bottom leftmost element - we could have placed it into a stand-alone 1x1 group, but that group would have all the *A, B, C* arguments in the produced minterm, while the big 4x1 group would eliminate *B* and *C. 
For the three groups we have on figure 2.14, we produce minterms: 
* `C`$
* `B`$
* `A`$

And the resulting expression is exceptionally elegant: 

```$
R = A + B + C
```

### Karnaugh maps - functions of four arguments 
 
Karnaugh map of a function of four arguments is fairly similar to the map of three arguments, but this time vertical index is also a 'composite' of two arguments, so the whole map for the function of four arguments looks like two maps of function of three arguments stacked one on top of another. An empty 'template' map for the function of four arguments *A, B, C, D* is shown on the figure 2.15: 

{width: "65%"}![Figure 2.15 - empty four variable Karnaugh map](ch2_empty_four_var_kmap.svg)

So let say we have a function defined by the table 2.4, argumnets are *A, B, C, D* and output is *Q*. 

{width: "80%"}![Table 2.4](ch2_tab_four_args_karnaugh_maps.svg)

For that function we fill the Karnaugh map as follows, figure 2.16: 

{width: "65%"}![Figure 2.16 - Karnaugh map example](ch2_four_var_kmap_ex1.svg)



** __TODO__**

## Ripple Carry Adder 

By chaining multiple single-bit full adders we could create a circuit that produces addition of two numbers of any number of binary digits, like the 4-bit adder producing 5-bit result shown on figure 2.**XX**. We would get back to a one-bit adder later in this chapter.

{width: "90%"}![Figure 2.XX - 4-bit adder](ch2_4_bit_adder.svg)

**tbd**

## Carry Lookahead Adder 

**tbd**

## MUX 

### 4-1 MUX 

## Demux 

## Something else?? 
